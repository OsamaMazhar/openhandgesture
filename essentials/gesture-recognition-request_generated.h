// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GESTURERECOGNITIONREQUEST_GESTURE_RECOGNITION_H_
#define FLATBUFFERS_GENERATED_GESTURERECOGNITIONREQUEST_GESTURE_RECOGNITION_H_

#include "flatbuffers/flatbuffers.h"

#include "gesture-recognition-kinect2-frame_generated.h"

namespace gesture_recognition {

struct request_identification;

struct request_identification FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_COLOR = 4,
    VT_DEPTH = 6
  };
  const kinect2_frame *color() const {
    return GetPointer<const kinect2_frame *>(VT_COLOR);
  }
  const kinect2_frame *depth() const {
    return GetPointer<const kinect2_frame *>(VT_DEPTH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           VerifyOffset(verifier, VT_DEPTH) &&
           verifier.VerifyTable(depth()) &&
           verifier.EndTable();
  }
};

struct request_identificationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_color(flatbuffers::Offset<kinect2_frame> color) {
    fbb_.AddOffset(request_identification::VT_COLOR, color);
  }
  void add_depth(flatbuffers::Offset<kinect2_frame> depth) {
    fbb_.AddOffset(request_identification::VT_DEPTH, depth);
  }
  explicit request_identificationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  request_identificationBuilder &operator=(const request_identificationBuilder &);
  flatbuffers::Offset<request_identification> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<request_identification>(end);
    return o;
  }
};

inline flatbuffers::Offset<request_identification> Createrequest_identification(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<kinect2_frame> color = 0,
    flatbuffers::Offset<kinect2_frame> depth = 0) {
  request_identificationBuilder builder_(_fbb);
  builder_.add_depth(depth);
  builder_.add_color(color);
  return builder_.Finish();
}

inline const gesture_recognition::request_identification *Getrequest_identification(const void *buf) {
  return flatbuffers::GetRoot<gesture_recognition::request_identification>(buf);
}

inline const gesture_recognition::request_identification *GetSizePrefixedrequest_identification(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<gesture_recognition::request_identification>(buf);
}

inline bool Verifyrequest_identificationBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<gesture_recognition::request_identification>(nullptr);
}

inline bool VerifySizePrefixedrequest_identificationBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<gesture_recognition::request_identification>(nullptr);
}

inline void Finishrequest_identificationBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gesture_recognition::request_identification> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedrequest_identificationBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gesture_recognition::request_identification> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace gesture_recognition

#endif  // FLATBUFFERS_GENERATED_GESTURERECOGNITIONREQUEST_GESTURE_RECOGNITION_H_

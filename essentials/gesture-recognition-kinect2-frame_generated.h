// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GESTURERECOGNITIONKINECT2FRAME_GESTURE_RECOGNITION_H_
#define FLATBUFFERS_GENERATED_GESTURERECOGNITIONKINECT2FRAME_GESTURE_RECOGNITION_H_

#include "flatbuffers/flatbuffers.h"

namespace gesture_recognition {

struct kinect2_frame;

struct kinect2_frame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_BYTES_PER_PIXEL = 8,
    VT_DATA = 10,
    VT_TIMESTAMP = 12,
    VT_SEQUENCE = 14,
    VT_EXPOSURE = 16,
    VT_GAIN = 18,
    VT_GAMMA = 20,
    VT_STATUS = 22,
    VT_FORMAT = 24
  };
  uint32_t width() const {
    return GetField<uint32_t>(VT_WIDTH, 0);
  }
  uint32_t height() const {
    return GetField<uint32_t>(VT_HEIGHT, 0);
  }
  uint32_t bytes_per_pixel() const {
    return GetField<uint32_t>(VT_BYTES_PER_PIXEL, 0);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  uint32_t timestamp() const {
    return GetField<uint32_t>(VT_TIMESTAMP, 0);
  }
  uint32_t sequence() const {
    return GetField<uint32_t>(VT_SEQUENCE, 0);
  }
  float exposure() const {
    return GetField<float>(VT_EXPOSURE, 0.0f);
  }
  float gain() const {
    return GetField<float>(VT_GAIN, 0.0f);
  }
  float gamma() const {
    return GetField<float>(VT_GAMMA, 0.0f);
  }
  uint32_t status() const {
    return GetField<uint32_t>(VT_STATUS, 0);
  }
  uint32_t format() const {
    return GetField<uint32_t>(VT_FORMAT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_WIDTH) &&
           VerifyField<uint32_t>(verifier, VT_HEIGHT) &&
           VerifyField<uint32_t>(verifier, VT_BYTES_PER_PIXEL) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyField<uint32_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<uint32_t>(verifier, VT_SEQUENCE) &&
           VerifyField<float>(verifier, VT_EXPOSURE) &&
           VerifyField<float>(verifier, VT_GAIN) &&
           VerifyField<float>(verifier, VT_GAMMA) &&
           VerifyField<uint32_t>(verifier, VT_STATUS) &&
           VerifyField<uint32_t>(verifier, VT_FORMAT) &&
           verifier.EndTable();
  }
};

struct kinect2_frameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(uint32_t width) {
    fbb_.AddElement<uint32_t>(kinect2_frame::VT_WIDTH, width, 0);
  }
  void add_height(uint32_t height) {
    fbb_.AddElement<uint32_t>(kinect2_frame::VT_HEIGHT, height, 0);
  }
  void add_bytes_per_pixel(uint32_t bytes_per_pixel) {
    fbb_.AddElement<uint32_t>(kinect2_frame::VT_BYTES_PER_PIXEL, bytes_per_pixel, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(kinect2_frame::VT_DATA, data);
  }
  void add_timestamp(uint32_t timestamp) {
    fbb_.AddElement<uint32_t>(kinect2_frame::VT_TIMESTAMP, timestamp, 0);
  }
  void add_sequence(uint32_t sequence) {
    fbb_.AddElement<uint32_t>(kinect2_frame::VT_SEQUENCE, sequence, 0);
  }
  void add_exposure(float exposure) {
    fbb_.AddElement<float>(kinect2_frame::VT_EXPOSURE, exposure, 0.0f);
  }
  void add_gain(float gain) {
    fbb_.AddElement<float>(kinect2_frame::VT_GAIN, gain, 0.0f);
  }
  void add_gamma(float gamma) {
    fbb_.AddElement<float>(kinect2_frame::VT_GAMMA, gamma, 0.0f);
  }
  void add_status(uint32_t status) {
    fbb_.AddElement<uint32_t>(kinect2_frame::VT_STATUS, status, 0);
  }
  void add_format(uint32_t format) {
    fbb_.AddElement<uint32_t>(kinect2_frame::VT_FORMAT, format, 0);
  }
  explicit kinect2_frameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  kinect2_frameBuilder &operator=(const kinect2_frameBuilder &);
  flatbuffers::Offset<kinect2_frame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<kinect2_frame>(end);
    return o;
  }
};

inline flatbuffers::Offset<kinect2_frame> Createkinect2_frame(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t width = 0,
    uint32_t height = 0,
    uint32_t bytes_per_pixel = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0,
    uint32_t timestamp = 0,
    uint32_t sequence = 0,
    float exposure = 0.0f,
    float gain = 0.0f,
    float gamma = 0.0f,
    uint32_t status = 0,
    uint32_t format = 0) {
  kinect2_frameBuilder builder_(_fbb);
  builder_.add_format(format);
  builder_.add_status(status);
  builder_.add_gamma(gamma);
  builder_.add_gain(gain);
  builder_.add_exposure(exposure);
  builder_.add_sequence(sequence);
  builder_.add_timestamp(timestamp);
  builder_.add_data(data);
  builder_.add_bytes_per_pixel(bytes_per_pixel);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline flatbuffers::Offset<kinect2_frame> Createkinect2_frameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t width = 0,
    uint32_t height = 0,
    uint32_t bytes_per_pixel = 0,
    const std::vector<uint8_t> *data = nullptr,
    uint32_t timestamp = 0,
    uint32_t sequence = 0,
    float exposure = 0.0f,
    float gain = 0.0f,
    float gamma = 0.0f,
    uint32_t status = 0,
    uint32_t format = 0) {
  return gesture_recognition::Createkinect2_frame(
      _fbb,
      width,
      height,
      bytes_per_pixel,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0,
      timestamp,
      sequence,
      exposure,
      gain,
      gamma,
      status,
      format);
}

}  // namespace gesture_recognition

#endif  // FLATBUFFERS_GENERATED_GESTURERECOGNITIONKINECT2FRAME_GESTURE_RECOGNITION_H_
